#pragma version >=0.2.0;
#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

(builder) convertIntToStr (builder string, int n) {
  tuple chars = null();
  do {
      int r = n~divmod(10);
      chars = cons(r + 48, chars);
  } until (n == 0);
  do {
      int char = chars~list_next();
      string~store_uint(char, 8);
  } until (null?(chars));
  return (string);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();
    
   

    int a = msg_value / 1000000000;
    int b = msg_value / 10000000;
    


    cell body_dict = new_dict();

    body_dict~udict_set_ref(256, "image"H, begin_cell().store_uint(0, 8).store_slice("https://shorturl.at/ELRZ1").end_cell()); ;; todo put here some image link
    body_dict~udict_set_ref(256, "name"H, begin_cell().store_uint(0, 8).store_slice("I just burned ").convertIntToStr(a).store_slice(".").convertIntToStr((b - (a * 100))).store_slice(" TONs!").end_cell()); ;; todo put here some name + TON NUMBER
    body_dict~udict_set_ref(256, "description"H, begin_cell().store_uint(0, 8).store_slice("I think that was a bad decision").end_cell()); ;; todo put here some description + TON NUMBER + LINK TO GIT REPO

    deploy_nft_item(next_item_index + 1, nft_item_code, 50000000, ;; todo think about 100000 
      begin_cell()
      .store_slice(sender_address)
      .store_dict(body_dict)
      .end_cell()); 
    
    next_item_index += 1;
    save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
    return ();
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  cell cs = content;
  return (next_item_index, cs, owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _) = load_data();
  slice cs = content.begin_parse();
  ;;cs~load_ref();
  ;;slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(0, 8) ;; onchain tag
                      .store_dict(individual_nft_content)
          .end_cell());
}


